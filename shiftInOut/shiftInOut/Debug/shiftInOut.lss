
shiftInOut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d5  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ba  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000333  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e4  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
       
       PORTB |= (1 << clock_shftout); // CLK vai pra 1
       PORTB &= ~(1 << clock_shftout); // CLK vai pra 0
	}
    
}
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <SetBit+0xa>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <SetBit+0x6>
  b4:	82 2b       	or	r24, r18
  b6:	08 95       	ret

000000b8 <ClearBit>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <ClearBit+0xa>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <ClearBit+0x6>
  c6:	20 95       	com	r18
  c8:	82 23       	and	r24, r18
  ca:	08 95       	ret

000000cc <shiftIn>:
  cc:	cf 93       	push	r28
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	85 b9       	out	0x05, r24	; 5
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	2f c0       	rjmp	.+94     	; 0x148 <shiftIn+0x7c>
  ea:	18 9b       	sbis	0x03, 0	; 3
  ec:	15 c0       	rjmp	.+42     	; 0x118 <shiftIn+0x4c>
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0c 2e       	mov	r0, r28
  f8:	02 c0       	rjmp	.+4      	; 0xfe <shiftIn+0x32>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <shiftIn+0x2e>
 102:	20 95       	com	r18
 104:	30 95       	com	r19
 106:	28 2b       	or	r18, r24
 108:	23 2b       	or	r18, r19
 10a:	b9 f0       	breq	.+46     	; 0x13a <shiftIn+0x6e>
 10c:	6c 2f       	mov	r22, r28
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	11 c0       	rjmp	.+34     	; 0x13a <shiftIn+0x6e>
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	0c 2e       	mov	r0, r28
 122:	02 c0       	rjmp	.+4      	; 0x128 <shiftIn+0x5c>
 124:	35 95       	asr	r19
 126:	27 95       	ror	r18
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <shiftIn+0x58>
 12c:	20 ff       	sbrs	r18, 0
 12e:	05 c0       	rjmp	.+10     	; 0x13a <shiftIn+0x6e>
 130:	6c 2f       	mov	r22, r28
 132:	0e 94 5c 00 	call	0xb8	; 0xb8 <ClearBit>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	85 b9       	out	0x05, r24	; 5
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	85 b9       	out	0x05, r24	; 5
 146:	cf 5f       	subi	r28, 0xFF	; 255
 148:	c8 30       	cpi	r28, 0x08	; 8
 14a:	78 f2       	brcs	.-98     	; 0xea <shiftIn+0x1e>
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <main>:

int main(void)
{
	DDRB &= 0b11111110; // o pino PB0 ser? usado como leitura do serial, 
 150:	84 b1       	in	r24, 0x04	; 4
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	84 b9       	out	0x04, r24	; 4
	DDRB |= 0b00000110; // os pinos PB1 e PB2 ser? a sa?da de clock (CLK) e o controle paralelo/serial (P/S')
 156:	84 b1       	in	r24, 0x04	; 4
 158:	86 60       	ori	r24, 0x06	; 6
 15a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; // PORTD ? sa?da (s? pra teste)
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8a b9       	out	0x0a, r24	; 10
    /* Replace with your application code */
    while (1) 
    {
        //shiftOut();
		shiftIn();
 160:	0e 94 66 00 	call	0xcc	; 0xcc <shiftIn>
		PORTD = varLeituraSerial;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	fa cf       	rjmp	.-12     	; 0x160 <main+0x10>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
