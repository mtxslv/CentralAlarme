
LCD_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000979  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000979  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000159e  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00001fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000759  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000210  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000483  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000036fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000089c  0000089c  00000970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_int1 0000000c  00000890  00000890  00000964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.delay_ms 00000054  0000051e  0000051e  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.delay_ns 00000048  000006fe  000006fe  000007d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.send_instruction_lcd 00000040  0000078e  0000078e  00000862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.send_instruction_lcd_nibble 00000020  000007fa  000007fa  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.inicializa_display 0000009e  00000418  00000418  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.send_word_lcd 0000004c  000006b2  000006b2  00000786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.set_DDRAM_ADDR 0000004e  00000664  00000664  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.envia_frase 0000002c  000007ce  000007ce  000008a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000047  000000ce  000000ce  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.msg_desativado 00000050  000005c4  000005c4  00000698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.msg_programacao 00000050  00000614  00000614  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.insert_senha 00000014  00000868  00000868  0000093c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.clear_Display 00000014  0000087c  0000087c  00000950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.msg_inserir_senha 00000048  00000746  00000746  0000081a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_2 00000302  00000116  00000116  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.verify_senha 00000052  00000572  00000572  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.main    00000068  000004b6  000004b6  0000058a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.state    00000001  00800121  00800121  00000979  2**0
                  ALLOC
 33 .bss.count_senha 00000002  0080011f  0080011f  00000979  2**0
                  ALLOC
 34 .data.mestre  00000005  00800116  000008a0  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .bss.x        00000004  0080011b  0080011b  00000979  2**0
                  ALLOC
 36 .text.libgcc.mul 00000016  00000852  00000852  00000926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc  0000001a  00000838  00000838  0000090c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc.mul 0000001e  0000081a  0000081a  000008ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_2>
   c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  10:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  14:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  18:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  1c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  20:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  24:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  28:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  2c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  30:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  34:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  38:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  3c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  40:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  44:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  48:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  4c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  50:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  54:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  58:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  5c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  60:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>
  64:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 16       	cp	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	16 01       	movw	r2, r12
  70:	1b 00       	.word	0x001b	; ????
  72:	08 a0       	ldd	r0, Y+32	; 0x20
  74:	01 1b       	sub	r16, r17
  76:	01 22       	and	r0, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  c6:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

0000089c <__bad_interrupt>:
 89c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_int1:

00000890 <init_int1>:

// INTERRUPÇÃO EXTERNA //

void init_int1(){
	
	EICRA = (1<<ISC11) | (1<<ISC10);
 890:	8c e0       	ldi	r24, 0x0C	; 12
 892:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1<<INT1);
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	8d bb       	out	0x1d, r24	; 29
 89a:	08 95       	ret

Disassembly of section .text.delay_ms:

0000051e <delay_ms>:
	while(data[cont] != '\0'){
		auxChar[cont] = data[cont];
		cont++;
	}
	auxChar[cont] = '\0';
}
 51e:	9b 01       	movw	r18, r22
 520:	ac 01       	movw	r20, r24
 522:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <x>
 526:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <x+0x1>
 52a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <x+0x2>
 52e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <x+0x3>
 532:	a8 ee       	ldi	r26, 0xE8	; 232
 534:	b3 e0       	ldi	r27, 0x03	; 3
 536:	0e 94 29 04 	call	0x852	; 0x852 <__muluhisi3>
 53a:	ab 01       	movw	r20, r22
 53c:	bc 01       	movw	r22, r24
 53e:	0b c0       	rjmp	.+22     	; 0x556 <delay_ms+0x38>
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	a1 1d       	adc	r26, r1
 544:	b1 1d       	adc	r27, r1
 546:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <x>
 54a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <x+0x1>
 54e:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <x+0x2>
 552:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <x+0x3>
 556:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <x>
 55a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <x+0x1>
 55e:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <x+0x2>
 562:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <x+0x3>
 566:	48 17       	cp	r20, r24
 568:	59 07       	cpc	r21, r25
 56a:	6a 07       	cpc	r22, r26
 56c:	7b 07       	cpc	r23, r27
 56e:	44 f7       	brge	.-48     	; 0x540 <delay_ms+0x22>
 570:	08 95       	ret

Disassembly of section .text.delay_ns:

000006fe <delay_ns>:
	while(x <= m){
		x++;
	}
}

void delay_ns(long int n){
 6fe:	ab 01       	movw	r20, r22
 700:	bc 01       	movw	r22, r24

	x = 0;
 702:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <x>
 706:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <x+0x1>
 70a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <x+0x2>
 70e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <x+0x3>
	
	long int m = 1 * n;
	
	while(x <= m){
 712:	0b c0       	rjmp	.+22     	; 0x72a <delay_ns+0x2c>
		x++;
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	a1 1d       	adc	r26, r1
 718:	b1 1d       	adc	r27, r1
 71a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <x>
 71e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <x+0x1>
 722:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <x+0x2>
 726:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <x+0x3>

	x = 0;
	
	long int m = 1 * n;
	
	while(x <= m){
 72a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <x>
 72e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <x+0x1>
 732:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <x+0x2>
 736:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <x+0x3>
 73a:	48 17       	cp	r20, r24
 73c:	59 07       	cpc	r21, r25
 73e:	6a 07       	cpc	r22, r26
 740:	7b 07       	cpc	r23, r27
 742:	44 f7       	brge	.-48     	; 0x714 <delay_ns+0x16>
		x++;
	}
}
 744:	08 95       	ret

Disassembly of section .text.send_instruction_lcd:

0000078e <send_instruction_lcd>:

// DISPLAY //

void send_instruction_lcd(uint8_t data){
	PORTB &= 0xC0;
 78e:	95 b1       	in	r25, 0x05	; 5
 790:	90 7c       	andi	r25, 0xC0	; 192
 792:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<RS);  // RS = 0 => intruções
 794:	95 b1       	in	r25, 0x05	; 5
 796:	9f 7e       	andi	r25, 0xEF	; 239
 798:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 79a:	95 b1       	in	r25, 0x05	; 5
 79c:	90 62       	ori	r25, 0x20	; 32
 79e:	95 b9       	out	0x05, r25	; 5
	PORTB |= (data >> 4); // seta barramento de dados com nibble mais significativo
 7a0:	95 b1       	in	r25, 0x05	; 5
 7a2:	28 2f       	mov	r18, r24
 7a4:	22 95       	swap	r18
 7a6:	2f 70       	andi	r18, 0x0F	; 15
 7a8:	92 2b       	or	r25, r18
 7aa:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 7ac:	95 b1       	in	r25, 0x05	; 5
 7ae:	9f 7d       	andi	r25, 0xDF	; 223
 7b0:	95 b9       	out	0x05, r25	; 5
	
	PORTB &= 0xC0;
 7b2:	95 b1       	in	r25, 0x05	; 5
 7b4:	90 7c       	andi	r25, 0xC0	; 192
 7b6:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 7b8:	95 b1       	in	r25, 0x05	; 5
 7ba:	90 62       	ori	r25, 0x20	; 32
 7bc:	95 b9       	out	0x05, r25	; 5
	PORTB |= data & 0x0F; // seta barramento de dados com nibble mais significativo
 7be:	95 b1       	in	r25, 0x05	; 5
 7c0:	8f 70       	andi	r24, 0x0F	; 15
 7c2:	89 2b       	or	r24, r25
 7c4:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 7c6:	85 b1       	in	r24, 0x05	; 5
 7c8:	8f 7d       	andi	r24, 0xDF	; 223
 7ca:	85 b9       	out	0x05, r24	; 5
 7cc:	08 95       	ret

Disassembly of section .text.send_instruction_lcd_nibble:

000007fa <send_instruction_lcd_nibble>:
}

void send_instruction_lcd_nibble(uint8_t data){
	PORTB &= 0xC0;
 7fa:	95 b1       	in	r25, 0x05	; 5
 7fc:	90 7c       	andi	r25, 0xC0	; 192
 7fe:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<RS);  // RS = 0 => intruções
 800:	95 b1       	in	r25, 0x05	; 5
 802:	9f 7e       	andi	r25, 0xEF	; 239
 804:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 806:	95 b1       	in	r25, 0x05	; 5
 808:	90 62       	ori	r25, 0x20	; 32
 80a:	95 b9       	out	0x05, r25	; 5
	PORTB |= data; // seta barramento de dados com nibble mais significativo
 80c:	95 b1       	in	r25, 0x05	; 5
 80e:	89 2b       	or	r24, r25
 810:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 812:	85 b1       	in	r24, 0x05	; 5
 814:	8f 7d       	andi	r24, 0xDF	; 223
 816:	85 b9       	out	0x05, r24	; 5
 818:	08 95       	ret

Disassembly of section .text.inicializa_display:

00000418 <inicializa_display>:
	while(data[cont] != '\0'){
		auxChar[cont] = data[cont];
		cont++;
	}
	auxChar[cont] = '\0';
}
 418:	6f e0       	ldi	r22, 0x0F	; 15
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 8f 02 	call	0x51e	; 0x51e <delay_ms>
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	0e 94 fd 03 	call	0x7fa	; 0x7fa <send_instruction_lcd_nibble>
 42a:	65 e0       	ldi	r22, 0x05	; 5
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 8f 02 	call	0x51e	; 0x51e <delay_ms>
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 fd 03 	call	0x7fa	; 0x7fa <send_instruction_lcd_nibble>
 43c:	64 e6       	ldi	r22, 0x64	; 100
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <send_instruction_lcd_nibble>
 44e:	68 e2       	ldi	r22, 0x28	; 40
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <send_instruction_lcd_nibble>
 460:	68 e2       	ldi	r22, 0x28	; 40
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 46c:	88 e2       	ldi	r24, 0x28	; 40
 46e:	0e 94 c7 03 	call	0x78e	; 0x78e <send_instruction_lcd>
 472:	68 e2       	ldi	r22, 0x28	; 40
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 c7 03 	call	0x78e	; 0x78e <send_instruction_lcd>
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 8f 02 	call	0x51e	; 0x51e <delay_ms>
 490:	86 e0       	ldi	r24, 0x06	; 6
 492:	0e 94 c7 03 	call	0x78e	; 0x78e <send_instruction_lcd>
 496:	68 e2       	ldi	r22, 0x28	; 40
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 4a2:	8c e0       	ldi	r24, 0x0C	; 12
 4a4:	0e 94 c7 03 	call	0x78e	; 0x78e <send_instruction_lcd>
 4a8:	68 e2       	ldi	r22, 0x28	; 40
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 4b4:	08 95       	ret

Disassembly of section .text.send_word_lcd:

000006b2 <send_word_lcd>:
	delay_ns(40);
	
}

void send_word_lcd(uint8_t data){
	PORTB &= 0xF0;
 6b2:	95 b1       	in	r25, 0x05	; 5
 6b4:	90 7f       	andi	r25, 0xF0	; 240
 6b6:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1<<RS);  // RS = 1 => dados
 6b8:	95 b1       	in	r25, 0x05	; 5
 6ba:	90 61       	ori	r25, 0x10	; 16
 6bc:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 6be:	95 b1       	in	r25, 0x05	; 5
 6c0:	90 62       	ori	r25, 0x20	; 32
 6c2:	95 b9       	out	0x05, r25	; 5
	PORTB |= (data >> 4);// seta barramento de dados com nibble mais significativo
 6c4:	95 b1       	in	r25, 0x05	; 5
 6c6:	28 2f       	mov	r18, r24
 6c8:	22 95       	swap	r18
 6ca:	2f 70       	andi	r18, 0x0F	; 15
 6cc:	92 2b       	or	r25, r18
 6ce:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 6d0:	95 b1       	in	r25, 0x05	; 5
 6d2:	9f 7d       	andi	r25, 0xDF	; 223
 6d4:	95 b9       	out	0x05, r25	; 5
	
	PORTB &= 0xF0;
 6d6:	95 b1       	in	r25, 0x05	; 5
 6d8:	90 7f       	andi	r25, 0xF0	; 240
 6da:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 6dc:	95 b1       	in	r25, 0x05	; 5
 6de:	90 62       	ori	r25, 0x20	; 32
 6e0:	95 b9       	out	0x05, r25	; 5
	PORTB |= data & 0x0F; // seta barramento de dados com nibble menos significativo
 6e2:	95 b1       	in	r25, 0x05	; 5
 6e4:	8f 70       	andi	r24, 0x0F	; 15
 6e6:	89 2b       	or	r24, r25
 6e8:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 6ea:	85 b1       	in	r24, 0x05	; 5
 6ec:	8f 7d       	andi	r24, 0xDF	; 223
 6ee:	85 b9       	out	0x05, r24	; 5

	delay_ns(43);
 6f0:	6b e2       	ldi	r22, 0x2B	; 43
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 6fc:	08 95       	ret

Disassembly of section .text.set_DDRAM_ADDR:

00000664 <set_DDRAM_ADDR>:
}

void set_DDRAM_ADDR(uint8_t pos){
	uint8_t data = 0x80 | pos;
 664:	80 68       	ori	r24, 0x80	; 128
	PORTB &= 0xC0;
 666:	95 b1       	in	r25, 0x05	; 5
 668:	90 7c       	andi	r25, 0xC0	; 192
 66a:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<RS);  // RS = 0 => intruções
 66c:	95 b1       	in	r25, 0x05	; 5
 66e:	9f 7e       	andi	r25, 0xEF	; 239
 670:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 672:	95 b1       	in	r25, 0x05	; 5
 674:	90 62       	ori	r25, 0x20	; 32
 676:	95 b9       	out	0x05, r25	; 5
	PORTB |= (data >> 4); // seta barramento de dados com nibble mais significativo
 678:	95 b1       	in	r25, 0x05	; 5
 67a:	28 2f       	mov	r18, r24
 67c:	22 95       	swap	r18
 67e:	2f 70       	andi	r18, 0x0F	; 15
 680:	92 2b       	or	r25, r18
 682:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 684:	95 b1       	in	r25, 0x05	; 5
 686:	9f 7d       	andi	r25, 0xDF	; 223
 688:	95 b9       	out	0x05, r25	; 5
	
	PORTB &= 0xC0;
 68a:	95 b1       	in	r25, 0x05	; 5
 68c:	90 7c       	andi	r25, 0xC0	; 192
 68e:	95 b9       	out	0x05, r25	; 5
	PORTB |= (1 << EN);  // Seta o enable
 690:	95 b1       	in	r25, 0x05	; 5
 692:	90 62       	ori	r25, 0x20	; 32
 694:	95 b9       	out	0x05, r25	; 5
	PORTB |= data & 0x0F; // seta barramento de dados com nibble menos significativo
 696:	95 b1       	in	r25, 0x05	; 5
 698:	8f 70       	andi	r24, 0x0F	; 15
 69a:	89 2b       	or	r24, r25
 69c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<EN);  // EN = 0
 69e:	85 b1       	in	r24, 0x05	; 5
 6a0:	8f 7d       	andi	r24, 0xDF	; 223
 6a2:	85 b9       	out	0x05, r24	; 5
	delay_ns(43);
 6a4:	6b e2       	ldi	r22, 0x2B	; 43
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay_ns>
 6b0:	08 95       	ret

Disassembly of section .text.envia_frase:

000007ce <envia_frase>:
}

void envia_frase(char *frase,uint8_t pos){
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	8c 01       	movw	r16, r24
 7d6:	86 2f       	mov	r24, r22
	set_DDRAM_ADDR(pos);
 7d8:	0e 94 32 03 	call	0x664	; 0x664 <set_DDRAM_ADDR>
	uint8_t cont = 0;
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
	while(frase[cont] != '\0'){
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <envia_frase+0x18>
		send_word_lcd(frase[cont]);
 7e0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
		cont++;
 7e4:	cf 5f       	subi	r28, 0xFF	; 255
}

void envia_frase(char *frase,uint8_t pos){
	set_DDRAM_ADDR(pos);
	uint8_t cont = 0;
	while(frase[cont] != '\0'){
 7e6:	f8 01       	movw	r30, r16
 7e8:	ec 0f       	add	r30, r28
 7ea:	f1 1d       	adc	r31, r1
 7ec:	80 81       	ld	r24, Z
 7ee:	81 11       	cpse	r24, r1
 7f0:	f7 cf       	rjmp	.-18     	; 0x7e0 <envia_frase+0x12>
		send_word_lcd(frase[cont]);
		cont++;
	}
}
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	08 95       	ret

Disassembly of section .text.msg_desativado:

000005c4 <msg_desativado>:
	//char frase_2[] = "                ";
	//envia_frase(frase_2,l2C1);
	
}

void msg_desativado(){
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	62 97       	sbiw	r28, 0x12	; 18
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
	
	char frase_1[] = "Desativado      ";
 5d8:	2e ec       	ldi	r18, 0xCE	; 206
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	81 e1       	ldi	r24, 0x11	; 17
 5e0:	f9 01       	movw	r30, r18
 5e2:	de 01       	movw	r26, r28
 5e4:	11 96       	adiw	r26, 0x01	; 1
 5e6:	74 2f       	mov	r23, r20
 5e8:	0e 94 1c 04 	call	0x838	; 0x838 <__movmemx_qi>
	envia_frase(frase_1,l1C1);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <envia_frase>
	char frase_2[] = "";
 5f6:	1a 8a       	std	Y+18, r1	; 0x12
	envia_frase(frase_2,l2C1);
 5f8:	60 e4       	ldi	r22, 0x40	; 64
 5fa:	ce 01       	movw	r24, r28
 5fc:	42 96       	adiw	r24, 0x12	; 18
 5fe:	0e 94 e7 03 	call	0x7ce	; 0x7ce <envia_frase>
}
 602:	62 96       	adiw	r28, 0x12	; 18
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

Disassembly of section .text.msg_programacao:

00000614 <msg_programacao>:

void msg_programacao(){
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	62 97       	sbiw	r28, 0x12	; 18
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
	
	char frase_1[] = "Programacao     ";
 628:	2f ed       	ldi	r18, 0xDF	; 223
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	81 e1       	ldi	r24, 0x11	; 17
 630:	f9 01       	movw	r30, r18
 632:	de 01       	movw	r26, r28
 634:	11 96       	adiw	r26, 0x01	; 1
 636:	74 2f       	mov	r23, r20
 638:	0e 94 1c 04 	call	0x838	; 0x838 <__movmemx_qi>
	envia_frase(frase_1,l1C1);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	0e 94 e7 03 	call	0x7ce	; 0x7ce <envia_frase>
	char frase_2[] = "";
 646:	1a 8a       	std	Y+18, r1	; 0x12
	envia_frase(frase_2,l2C1);
 648:	60 e4       	ldi	r22, 0x40	; 64
 64a:	ce 01       	movw	r24, r28
 64c:	42 96       	adiw	r24, 0x12	; 18
 64e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <envia_frase>

}
 652:	62 96       	adiw	r28, 0x12	; 18
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

Disassembly of section .text.insert_senha:

00000868 <insert_senha>:

// INSERIR SENHA //

void insert_senha(int n,const char *digito){
	
	senha_inserida[n] = digito[0];
 868:	e4 2f       	mov	r30, r20
 86a:	f5 2f       	mov	r31, r21
 86c:	24 91       	lpm	r18, Z
 86e:	67 fd       	sbrc	r22, 7
 870:	20 81       	ld	r18, Z
 872:	8f 5e       	subi	r24, 0xEF	; 239
 874:	9e 4f       	sbci	r25, 0xFE	; 254
 876:	fc 01       	movw	r30, r24
 878:	20 83       	st	Z, r18
 87a:	08 95       	ret

Disassembly of section .text.clear_Display:

0000087c <clear_Display>:
	
}

void clear_Display(){
	
	send_instruction_lcd(0x01);
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	0e 94 c7 03 	call	0x78e	; 0x78e <send_instruction_lcd>
	delay_ms(5);
 882:	65 e0       	ldi	r22, 0x05	; 5
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 8f 02 	call	0x51e	; 0x51e <delay_ms>
 88e:	08 95       	ret

Disassembly of section .text.msg_inserir_senha:

00000746 <msg_inserir_senha>:
	auxChar[cont] = '\0';
}

// MSGS //

void msg_inserir_senha(){
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	61 97       	sbiw	r28, 0x11	; 17
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
	
	clear_Display();
 75a:	0e 94 3e 04 	call	0x87c	; 0x87c <clear_Display>
	
	char frase_1[] = "Insira a senha  ";
 75e:	20 ef       	ldi	r18, 0xF0	; 240
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	81 e1       	ldi	r24, 0x11	; 17
 766:	f9 01       	movw	r30, r18
 768:	de 01       	movw	r26, r28
 76a:	11 96       	adiw	r26, 0x01	; 1
 76c:	74 2f       	mov	r23, r20
 76e:	0e 94 1c 04 	call	0x838	; 0x838 <__movmemx_qi>
	envia_frase(frase_1,l1C1);
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	ce 01       	movw	r24, r28
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	0e 94 e7 03 	call	0x7ce	; 0x7ce <envia_frase>
	//char frase_2[] = "                ";
	//envia_frase(frase_2,l2C1);
	
}
 77c:	61 96       	adiw	r28, 0x11	; 17
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

Disassembly of section .text.__vector_2:

00000116 <__vector_2>:
	while(data[cont] != '\0'){
		auxChar[cont] = data[cont];
		cont++;
	}
	auxChar[cont] = '\0';
}
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	89 b1       	in	r24, 0x09	; 9
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	80 3f       	cpi	r24, 0xF0	; 240
 148:	91 05       	cpc	r25, r1
 14a:	d9 f4       	brne	.+54     	; 0x182 <__vector_2+0x6c>
 14c:	81 e3       	ldi	r24, 0x31	; 49
 14e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 152:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 156:	8e 30       	cpi	r24, 0x0E	; 14
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_2+0x46>
 15a:	4d c1       	rjmp	.+666    	; 0x3f6 <__vector_2+0x2e0>
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	51 e0       	ldi	r21, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 166:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 16a:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 16e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 172:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 17c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 180:	3a c1       	rjmp	.+628    	; 0x3f6 <__vector_2+0x2e0>
 182:	80 37       	cpi	r24, 0x70	; 112
 184:	91 05       	cpc	r25, r1
 186:	d9 f4       	brne	.+54     	; 0x1be <__vector_2+0xa8>
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 18e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 192:	8e 30       	cpi	r24, 0x0E	; 14
 194:	09 f0       	breq	.+2      	; 0x198 <__vector_2+0x82>
 196:	2f c1       	rjmp	.+606    	; 0x3f6 <__vector_2+0x2e0>
 198:	43 e0       	ldi	r20, 0x03	; 3
 19a:	51 e0       	ldi	r21, 0x01	; 1
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 1a2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 1a6:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 1aa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 1ae:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 1b8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 1bc:	1c c1       	rjmp	.+568    	; 0x3f6 <__vector_2+0x2e0>
 1be:	80 3b       	cpi	r24, 0xB0	; 176
 1c0:	91 05       	cpc	r25, r1
 1c2:	d9 f4       	brne	.+54     	; 0x1fa <__vector_2+0xe4>
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 1ca:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 1ce:	8e 30       	cpi	r24, 0x0E	; 14
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_2+0xbe>
 1d2:	11 c1       	rjmp	.+546    	; 0x3f6 <__vector_2+0x2e0>
 1d4:	45 e0       	ldi	r20, 0x05	; 5
 1d6:	51 e0       	ldi	r21, 0x01	; 1
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 1de:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 1e2:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 1e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 1ea:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 1f4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 1f8:	fe c0       	rjmp	.+508    	; 0x3f6 <__vector_2+0x2e0>
 1fa:	80 33       	cpi	r24, 0x30	; 48
 1fc:	91 05       	cpc	r25, r1
 1fe:	49 f4       	brne	.+18     	; 0x212 <__vector_2+0xfc>
 200:	80 e5       	ldi	r24, 0x50	; 80
 202:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
 20c:	0e 94 a3 03 	call	0x746	; 0x746 <msg_inserir_senha>
 210:	f2 c0       	rjmp	.+484    	; 0x3f6 <__vector_2+0x2e0>
 212:	80 3d       	cpi	r24, 0xD0	; 208
 214:	91 05       	cpc	r25, r1
 216:	d9 f4       	brne	.+54     	; 0x24e <__vector_2+0x138>
 218:	84 e3       	ldi	r24, 0x34	; 52
 21a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 21e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 222:	8e 30       	cpi	r24, 0x0E	; 14
 224:	09 f0       	breq	.+2      	; 0x228 <__vector_2+0x112>
 226:	e7 c0       	rjmp	.+462    	; 0x3f6 <__vector_2+0x2e0>
 228:	47 e0       	ldi	r20, 0x07	; 7
 22a:	51 e0       	ldi	r21, 0x01	; 1
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 232:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 236:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 23a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 23e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 248:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 24c:	d4 c0       	rjmp	.+424    	; 0x3f6 <__vector_2+0x2e0>
 24e:	80 35       	cpi	r24, 0x50	; 80
 250:	91 05       	cpc	r25, r1
 252:	d9 f4       	brne	.+54     	; 0x28a <__vector_2+0x174>
 254:	85 e3       	ldi	r24, 0x35	; 53
 256:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 25a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 25e:	8e 30       	cpi	r24, 0x0E	; 14
 260:	09 f0       	breq	.+2      	; 0x264 <__vector_2+0x14e>
 262:	c9 c0       	rjmp	.+402    	; 0x3f6 <__vector_2+0x2e0>
 264:	49 e0       	ldi	r20, 0x09	; 9
 266:	51 e0       	ldi	r21, 0x01	; 1
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 26e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 272:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 276:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 27a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 284:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 288:	b6 c0       	rjmp	.+364    	; 0x3f6 <__vector_2+0x2e0>
 28a:	80 39       	cpi	r24, 0x90	; 144
 28c:	91 05       	cpc	r25, r1
 28e:	d9 f4       	brne	.+54     	; 0x2c6 <__vector_2+0x1b0>
 290:	86 e3       	ldi	r24, 0x36	; 54
 292:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 296:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 29a:	8e 30       	cpi	r24, 0x0E	; 14
 29c:	09 f0       	breq	.+2      	; 0x2a0 <__vector_2+0x18a>
 29e:	ab c0       	rjmp	.+342    	; 0x3f6 <__vector_2+0x2e0>
 2a0:	4b e0       	ldi	r20, 0x0B	; 11
 2a2:	51 e0       	ldi	r21, 0x01	; 1
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 2aa:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 2ae:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 2b2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 2b6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 2c0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 2c4:	98 c0       	rjmp	.+304    	; 0x3f6 <__vector_2+0x2e0>
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	91 05       	cpc	r25, r1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <__vector_2+0x1be>
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 2d2:	91 c0       	rjmp	.+290    	; 0x3f6 <__vector_2+0x2e0>
 2d4:	80 3e       	cpi	r24, 0xE0	; 224
 2d6:	91 05       	cpc	r25, r1
 2d8:	d9 f4       	brne	.+54     	; 0x310 <__vector_2+0x1fa>
 2da:	87 e3       	ldi	r24, 0x37	; 55
 2dc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 2e0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 2e4:	8e 30       	cpi	r24, 0x0E	; 14
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_2+0x1d4>
 2e8:	86 c0       	rjmp	.+268    	; 0x3f6 <__vector_2+0x2e0>
 2ea:	4d e0       	ldi	r20, 0x0D	; 13
 2ec:	51 e0       	ldi	r21, 0x01	; 1
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 2f4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 2f8:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 2fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 300:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 30a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 30e:	73 c0       	rjmp	.+230    	; 0x3f6 <__vector_2+0x2e0>
 310:	80 36       	cpi	r24, 0x60	; 96
 312:	91 05       	cpc	r25, r1
 314:	d9 f4       	brne	.+54     	; 0x34c <__vector_2+0x236>
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 31c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 320:	8e 30       	cpi	r24, 0x0E	; 14
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_2+0x210>
 324:	68 c0       	rjmp	.+208    	; 0x3f6 <__vector_2+0x2e0>
 326:	4f e0       	ldi	r20, 0x0F	; 15
 328:	51 e0       	ldi	r21, 0x01	; 1
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 330:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 334:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 338:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 33c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 346:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 34a:	55 c0       	rjmp	.+170    	; 0x3f6 <__vector_2+0x2e0>
 34c:	80 3a       	cpi	r24, 0xA0	; 160
 34e:	91 05       	cpc	r25, r1
 350:	d9 f4       	brne	.+54     	; 0x388 <__vector_2+0x272>
 352:	89 e3       	ldi	r24, 0x39	; 57
 354:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 358:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 35c:	8e 30       	cpi	r24, 0x0E	; 14
 35e:	09 f0       	breq	.+2      	; 0x362 <__vector_2+0x24c>
 360:	4a c0       	rjmp	.+148    	; 0x3f6 <__vector_2+0x2e0>
 362:	41 e1       	ldi	r20, 0x11	; 17
 364:	51 e0       	ldi	r21, 0x01	; 1
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 36c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 370:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 374:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 378:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 382:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 386:	37 c0       	rjmp	.+110    	; 0x3f6 <__vector_2+0x2e0>
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	91 05       	cpc	r25, r1
 38c:	21 f4       	brne	.+8      	; 0x396 <__vector_2+0x280>
 38e:	84 e4       	ldi	r24, 0x44	; 68
 390:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 394:	30 c0       	rjmp	.+96     	; 0x3f6 <__vector_2+0x2e0>
 396:	80 3c       	cpi	r24, 0xC0	; 192
 398:	91 05       	cpc	r25, r1
 39a:	21 f4       	brne	.+8      	; 0x3a4 <__vector_2+0x28e>
 39c:	82 e5       	ldi	r24, 0x52	; 82
 39e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 3a2:	29 c0       	rjmp	.+82     	; 0x3f6 <__vector_2+0x2e0>
 3a4:	80 34       	cpi	r24, 0x40	; 64
 3a6:	91 05       	cpc	r25, r1
 3a8:	d1 f4       	brne	.+52     	; 0x3de <__vector_2+0x2c8>
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 3b0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 3b4:	8e 30       	cpi	r24, 0x0E	; 14
 3b6:	f9 f4       	brne	.+62     	; 0x3f6 <__vector_2+0x2e0>
 3b8:	43 e1       	ldi	r20, 0x13	; 19
 3ba:	51 e0       	ldi	r21, 0x01	; 1
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 3c2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 3c6:	0e 94 34 04 	call	0x868	; 0x868 <insert_senha>
 3ca:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 3ce:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <count_senha+0x1>
 3d8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count_senha>
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <__vector_2+0x2e0>
 3de:	80 38       	cpi	r24, 0x80	; 128
 3e0:	91 05       	cpc	r25, r1
 3e2:	21 f4       	brne	.+8      	; 0x3ec <__vector_2+0x2d6>
 3e4:	83 e5       	ldi	r24, 0x53	; 83
 3e6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <__vector_2+0x2e0>
 3ec:	89 2b       	or	r24, r25
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <__vector_2+0x2e0>
 3f0:	85 e4       	ldi	r24, 0x45	; 69
 3f2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <send_word_lcd>
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

Disassembly of section .text.verify_senha:

00000572 <verify_senha>:
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	09 c0       	rjmp	.+18     	; 0x58e <verify_senha+0x1c>
 57c:	fc 01       	movw	r30, r24
 57e:	ef 5e       	subi	r30, 0xEF	; 239
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	30 81       	ld	r19, Z
 584:	23 13       	cpse	r18, r19
 586:	02 c0       	rjmp	.+4      	; 0x58c <verify_senha+0x1a>
 588:	4f 5f       	subi	r20, 0xFF	; 255
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	fc 01       	movw	r30, r24
 590:	ea 5e       	subi	r30, 0xEA	; 234
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	20 81       	ld	r18, Z
 596:	21 11       	cpse	r18, r1
 598:	f1 cf       	rjmp	.-30     	; 0x57c <verify_senha+0xa>
 59a:	44 30       	cpi	r20, 0x04	; 4
 59c:	51 05       	cpc	r21, r1
 59e:	31 f4       	brne	.+12     	; 0x5ac <verify_senha+0x3a>
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
 5a6:	0e 94 3e 04 	call	0x87c	; 0x87c <clear_Display>
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <verify_senha+0x44>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
 5b2:	0e 94 3e 04 	call	0x87c	; 0x87c <clear_Display>
 5b6:	64 e1       	ldi	r22, 0x14	; 20
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 8f 02 	call	0x51e	; 0x51e <delay_ms>
 5c2:	08 95       	ret

Disassembly of section .text.main:

000004b6 <main>:
 4b6:	8f e3       	ldi	r24, 0x3F	; 63
 4b8:	84 b9       	out	0x04, r24	; 4
 4ba:	1a b8       	out	0x0a, r1	; 10
 4bc:	80 ef       	ldi	r24, 0xF0	; 240
 4be:	8b b9       	out	0x0b, r24	; 11
 4c0:	0e 94 48 04 	call	0x890	; 0x890 <init_int1>
 4c4:	0e 94 0c 02 	call	0x418	; 0x418 <inicializa_display>
 4c8:	78 94       	sei
 4ca:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
 4ce:	8a 30       	cpi	r24, 0x0A	; 10
 4d0:	91 f0       	breq	.+36     	; 0x4f6 <main+0x40>
 4d2:	28 f4       	brcc	.+10     	; 0x4de <main+0x28>
 4d4:	88 23       	and	r24, r24
 4d6:	41 f0       	breq	.+16     	; 0x4e8 <main+0x32>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	51 f0       	breq	.+20     	; 0x4f0 <main+0x3a>
 4dc:	f6 cf       	rjmp	.-20     	; 0x4ca <main+0x14>
 4de:	8e 30       	cpi	r24, 0x0E	; 14
 4e0:	69 f0       	breq	.+26     	; 0x4fc <main+0x46>
 4e2:	8f 30       	cpi	r24, 0x0F	; 15
 4e4:	c9 f0       	breq	.+50     	; 0x518 <main+0x62>
 4e6:	f1 cf       	rjmp	.-30     	; 0x4ca <main+0x14>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
 4ee:	ed cf       	rjmp	.-38     	; 0x4ca <main+0x14>
 4f0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <msg_desativado>
 4f4:	ea cf       	rjmp	.-44     	; 0x4ca <main+0x14>
 4f6:	0e 94 0a 03 	call	0x614	; 0x614 <msg_programacao>
 4fa:	e7 cf       	rjmp	.-50     	; 0x4ca <main+0x14>
 4fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count_senha>
 500:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <count_senha+0x1>
 504:	04 97       	sbiw	r24, 0x04	; 4
 506:	0c f3       	brlt	.-62     	; 0x4ca <main+0x14>
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
 50e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <count_senha+0x1>
 512:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <count_senha>
 516:	d9 cf       	rjmp	.-78     	; 0x4ca <main+0x14>
 518:	0e 94 b9 02 	call	0x572	; 0x572 <verify_senha>
 51c:	d6 cf       	rjmp	.-84     	; 0x4ca <main+0x14>

Disassembly of section .text.libgcc.mul:

00000852 <__muluhisi3>:
 852:	0e 94 0d 04 	call	0x81a	; 0x81a <__umulhisi3>
 856:	a5 9f       	mul	r26, r21
 858:	90 0d       	add	r25, r0
 85a:	b4 9f       	mul	r27, r20
 85c:	90 0d       	add	r25, r0
 85e:	a4 9f       	mul	r26, r20
 860:	80 0d       	add	r24, r0
 862:	91 1d       	adc	r25, r1
 864:	11 24       	eor	r1, r1
 866:	08 95       	ret

Disassembly of section .text.libgcc:

00000838 <__movmemx_qi>:
 838:	99 27       	eor	r25, r25

0000083a <__movmemx_hi>:
 83a:	77 fd       	sbrc	r23, 7
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__movmemx_hi+0xe>
 83e:	05 90       	lpm	r0, Z+
 840:	0d 92       	st	X+, r0
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	e1 f7       	brne	.-8      	; 0x83e <__movmemx_hi+0x4>
 846:	08 95       	ret
 848:	01 90       	ld	r0, Z+
 84a:	0d 92       	st	X+, r0
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	e1 f7       	brne	.-8      	; 0x848 <__movmemx_hi+0xe>
 850:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000081a <__umulhisi3>:
 81a:	a2 9f       	mul	r26, r18
 81c:	b0 01       	movw	r22, r0
 81e:	b3 9f       	mul	r27, r19
 820:	c0 01       	movw	r24, r0
 822:	a3 9f       	mul	r26, r19
 824:	70 0d       	add	r23, r0
 826:	81 1d       	adc	r24, r1
 828:	11 24       	eor	r1, r1
 82a:	91 1d       	adc	r25, r1
 82c:	b2 9f       	mul	r27, r18
 82e:	70 0d       	add	r23, r0
 830:	81 1d       	adc	r24, r1
 832:	11 24       	eor	r1, r1
 834:	91 1d       	adc	r25, r1
 836:	08 95       	ret
